<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:int="http://www.springframework.org/schema/integration"
       xmlns:file="http://www.springframework.org/schema/integration/file"
       xsi:schemaLocation="
       http://www.springframework.org/schema/integration
       https://www.springframework.org/schema/integration/spring-integration.xsd
       http://www.springframework.org/schema/integration/file
	   https://www.springframework.org/schema/integration/file/spring-integration-file.xsd
	   http://www.springframework.org/schema/beans
	   https://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 
        标准表达方式，输入channel, 依赖的外部类，都依次声明
        然后在adpater中引用
            <file:file-to-string-transformer input-channel="filesIn" output-channel="strings"/>
    -->       
    <file:inbound-channel-adapter 
        id="filesIn"
        directory="file:${java.io.tmpdir}/si-demo/input"
        filename-regex="[a-z]+.txt">
        <int:poller id="poller" fixed-delay="5000"/>
    </file:inbound-channel-adapter>

    <!-- 
        另外一种表达方式，将bean放在adapter中，可以不用写ref
        输出的channel，并没有提前声明，这个是由java dsl中产生的，约定好名称就行
        此外，注意因为outbound-channel-adapter是最后一棒，
        它负责将outputchannel中的信息读出来，并进行处理。
        这个处理不需要返回信息了，所以处理的方法应该是void型。
    -->
    <int:outbound-channel-adapter channel="outputChannel"  method="print">
        <bean class="com.pear.si.dsldemo.service.impl.MessageDestImpl"/>
    </int:outbound-channel-adapter>

</beans>